<SimpleColorPicker>:
    color: [0.0, 0.0, 0.0]
    GridLayout:
        cols:   3
        canvas.before:
            Color:
                rgb: root.color
            Rectangle:
                pos: self.pos
                size: self.size
        Label:
            text: "R"
            color: [1.0, 1.0, 1.0, 1.0] if sum(root.color) < 1.3 else [0.0, 0.0, 0.0, 1.0]
            size_hint_x: None
            width: '35dp'
        Slider:
            id: red_slider
            min: 0
            max: 255
            value: int(root.color[0] * 255)
            on_value: root.color[0] = self.value / 255.0
            step: 1
        Label:
            text: str(red_slider.value)
            color: [1.0, 1.0, 1.0, 1.0] if sum(root.color) < 1.3 else [0.0, 0.0, 0.0, 1.0]
            size_hint_x: None
            width: '35dp'
        Label:
            text: "G"
            color: [1.0, 1.0, 1.0, 1.0] if sum(root.color) < 1.3 else [0.0, 0.0, 0.0, 1.0]
            size_hint_x: None
            width: '35dp'
        Slider:
            id: green_slider
            min: 0
            max: 255
            value: int(root.color[1] * 255)
            on_value: root.color[1] = self.value / 255.0
            step: 1
        Label:
            text: str(green_slider.value)
            color: [1.0, 1.0, 1.0, 1.0] if sum(root.color) < 1.3 else [0.0, 0.0, 0.0, 1.0]
            size_hint_x: None
            width: '35dp'
        Label:
            text: "B"
            color: [1.0, 1.0, 1.0, 1.0] if sum(root.color) < 1.3 else [0.0, 0.0, 0.0, 1.0]
            size_hint_x: None
            width: '35dp'
        Slider:
            id: blue_slider
            min: 0
            max: 255
            value: int(root.color[2] * 255)
            on_value: root.color[2] = self.value / 255.0
            step: 1
        Label:
            text: str(blue_slider.value)
            color: [1.0, 1.0, 1.0, 1.0] if sum(root.color) < 1.3 else [0.0, 0.0, 0.0, 1.0]
            size_hint_x: None
            width: '35dp'

<LaserDetection>:
    name: 'color_control_ui'
    GridLayout:
        cols: 1
        Label:
            size_hint_y: None
            height: app.label_height
            text: "LaserColor"
        BoxLayout:
            size_hint_y: None
            height: app.button_height
            ToggleButton:
                id: red
                group: 'laser_color'
                text: 'Red'
                on_release: root.color = 'red'
            ToggleButton:
                id: blue
                group: 'laser_color'
                text: 'Blue'
                on_release: root.color = 'blue'
            ToggleButton:
                id: green
                group: 'laser_color'
                text: 'Green'
                on_release: root.color = 'green'
        Label:
            size_hint_y: None
            height: app.label_height
            text: "Threshold"
        BoxLayout:
            size_hint_y: None
            height: app.button_height
            Label:
                size_hint_x: None
                width: '20dp'
                text: ''
            Slider:
                id: threshold
                min: 0
                max: 255
                value: root.threshold
                on_value: root.threshold = self.value
            Label:
                size_hint_x: None
                width: '30dp'
                text: "{:.0f}".format(threshold.value)
        Label:
            size_hint_y: None
            height: app.label_height
            text: "Errosion"
        BoxLayout:
            size_hint_y: None
            height: app.button_height
            Label:
                size_hint_x: None
                width: '20dp'
                text: 'x'
            Slider:
                id: errosion_x
                min: 1
                max: 20
                step: 1
                value: root.errosion_x
                on_value: root.errosion_x = self.value
            Label:
                size_hint_x: None
                width: '30dp'
                text: "{:.0f}".format(errosion_x.value)
        BoxLayout:
            size_hint_y: None
            height: app.button_height
            Label:
                size_hint_x: None
                width: '20dp'
                text: 'y'
            Slider:
                id: errosion_y
                min: 1
                max: 20
                step: 1
                value: root.errosion_y
                on_value: root.errosion_y = self.value
            Label:
                size_hint_x: None
                width: '30dp'
                text: "{:.0f}".format(errosion_y.value)
        Label:
        Button:
            size_hint_y: None
            height: app.button_height
            text: 'Save'
            on_release: root.save()